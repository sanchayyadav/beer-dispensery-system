package com.beer.dispenser.apis.mapper;


import java.util.ArrayList;
import java.util.List;

import org.mapstruct.Mapper;
import org.mapstruct.Mapping;
import org.mapstruct.Mappings;
import org.mapstruct.factory.Mappers;

import com.beer.dispenser.apis.entity.Beer;
import com.beer.dispenser.apis.entity.BeerUsage;
import com.beer.dispenser.apis.request.dto.BeerRequestDTO;
import com.beer.dispenser.apis.response.dto.BeerAndBeerUsageResponseDTO;
import com.beer.dispenser.apis.response.dto.BeerResponseDTO;
import com.beer.dispenser.apis.response.dto.BeerUsageResponseDTO;

/**
 * 
 * Copies properties from:
 * <ul>
 * 	<li>
 * 		{@link com.beer.dispenser.apis.request.dto.BeerRequestDTO BeerRequestDTO} 
 * 			to 
 * 		{@link com.beer.dispenser.apis.entity.Beer Beer}
 * 	</li>
 * 	<li>
 * 		{@link com.beer.dispenser.apis.entity.Beer Beer}
 *      {@link com.beer.dispenser.apis.entity.BeerUsage BeerUsage}
 * 			to 
 * 		{@link com.beer.dispenser.apis.response.dto.BeerAndBeerUsageResponseDTO BeerAndBeerUsageResponseDTO}
 * 	</li>
 * </ul>
 * and more.
 * 
 * <p>
 * 	Custom mapper for copying data among different DTO(s) implemented using {@code MapStruct}.
 * </p>
 * 
 * <p>
 * 	This is just an interface layer. 
 * 	Implementation class is automatically generated by {@code MapStruct} when code is compiling(means at compile time MapStructImpl class is created) before starting the server.
 * </p>
 * 
 * @author 	Sanchay Yadav
 * @see		com.beer.dispenser.apis.request.dto.BeerRequestDTO
 * @see		com.beer.dispenser.apis.entity.Beer Beer
 * @see		com.beer.dispenser.apis.entity.BeerUsage BeerUsage
 * @see		com.beer.dispenser.apis.response.dto.BeerAndBeerUsageResponseDTO
 * @see		com.beer.dispenser.apis.response.dto.BeerResponseDTO
 * @see     com.beer.dispenser.apis.response.dto.BeerUsageResponseDTO
 * @since	26th November 2022
 *
 */
@Mapper(componentModel = "spring")
public interface BeerMapper {

	BeerMapper BEER = Mappers.getMapper(BeerMapper.class);

	/**
	 * Maps properties/fields from 
	 * {@link com.beer.dispenser.apis.request.dto.BeerRequestDTO}
	 * 	to
	 * {@link com.beer.dispenser.apis.entity.Beer}
	 * 
	 * @param	beerRequestDTO
	 * 			Request object to create a new beer dispensery.
	 * 
	 * @return	{@code Beer} object with initialized properties.
	 */
	default Beer mapToBeer(BeerRequestDTO beerRequestDTO) {
		
		Beer beer = this.mapToBeers(beerRequestDTO);
		return beer;
	}
	
	/**
	 *  Maps properties/fields from 
	 * {@link com.beer.dispenser.apis.request.dto.BeerRequestDTO}
	 * 	to
	 * {@link com.beer.dispenser.apis.entity.Beer}
	 * 
	 * @param	beerRequestDTO
	 * 			Request object to create a new beer dispensery.
	 * 
	 * @return	{@code Beer} object with initialized properties.
	 */
	@Mappings({
		@Mapping(target="amount", ignore=true),
		@Mapping(target="id",ignore=true)
	})
	Beer mapToBeers(BeerRequestDTO beerRequestDTO);
	
	/**
	 * Maps properties/fields from 
	 * {@link  com.beer.dispenser.apis.entity.Beer}
	 * 	to
	 * {@link com.beer.dispenser.apis.response.dto.BeerResponseDTO}
	 * 
	 * @param	beer
	 * 			Beer object to map with response. 
	 * 
	 * @return	{@code BeerResponseDTO} object with initialized properties.
	 */
	BeerResponseDTO mapToBeerResponseDTO(Beer beer);
	
	/**
	 * Maps properties/fields from 
	 * {@link com.beer.dispenser.apis.entity.Beer Beer}
	 * {@link com.beer.dispenser.apis.entity.BeerUsage BeerUsage}
	 * 			to 
	 * {@link com.beer.dispenser.apis.response.dto.BeerAndBeerUsageResponseDTO}
	 * 
	 * @param	beer
	 * 			Beer object to map with response. 
	 * 
	 * @param	beerUsages
	 * 			Beer object to map with response.
	 *  
	 * @return	{@code BeerAndBeerUsageResponseDTO} object with initialized properties.
	 */
	default BeerAndBeerUsageResponseDTO mapToBeerAndBeerUsage(Beer beer, List<BeerUsage> beerUsages) {
		
		BeerAndBeerUsageResponseDTO beerAndBeerUsageResponseDTO = new BeerAndBeerUsageResponseDTO();
		
		
		BeerAndBeerUsageResponseDTO beerAndBeerUsageResponseDTO1 = this.mapToBeerAndBeerUsage(beer);
		beerAndBeerUsageResponseDTO.setAmount(beerAndBeerUsageResponseDTO1.getAmount());
		
		List<BeerUsageResponseDTO> beerAndBeerUsageResponseDTOlist  = new ArrayList<>();
		
		for(BeerUsage beerUsage : beerUsages) {
			BeerUsageResponseDTO beerAndBeerUsageResponseDTO2 = this.mapToBeerAndBeerUsage(beerUsage, beer);
			beerAndBeerUsageResponseDTOlist.add(beerAndBeerUsageResponseDTO2);
		}
		beerAndBeerUsageResponseDTO.setUsages(beerAndBeerUsageResponseDTOlist);
		
		return beerAndBeerUsageResponseDTO;
	}

	/**
	 * Maps properties/fields from 
	 * {@link com.beer.dispenser.apis.entity.Beer Beer}
	 * {@link com.beer.dispenser.apis.entity.BeerUsage BeerUsage}
	 * 			to 
	 * {@link com.beer.dispenser.apis.response.dto.BeerResponseDTO}
	 * 
	 * @param	beerUsage
	 * 			Beer object to map with response.
	 * 
	 * @param	beer
	 * 			Beer object to map with response.
	 *  
	 * @return	{@code BeerUsageResponseDTO} object with initialized properties.
	 */
	@Mappings({
		@Mapping(target="beer.beerUsage", ignore=true),
		@Mapping(target="beerUsage.beer", ignore=true),
		@Mapping(target="beerUsage.id", ignore=true),
		@Mapping(source="beer.flow_volume", target="flow_volume")
	})
	BeerUsageResponseDTO mapToBeerAndBeerUsage(BeerUsage beerUsage, Beer beer);
	
	/**
	 * Maps properties/fields from 
	 * {@link com.beer.dispenser.apis.entity.Beer Beer}
	 * 			to 
	 * {@link com.beer.dispenser.apis.response.dto.BeerAndBeerUsageResponseDTO}
	 * 
	 * @param	beer
	 * 			Beer object to map with response.
	 * 
	 * @return	{@code BeerAndBeerUsageResponseDTO} object with initialized properties.
	 */
	@Mappings({
		@Mapping(target="beer.id", ignore = true),
	})
	BeerAndBeerUsageResponseDTO mapToBeerAndBeerUsage(Beer beer);

		 
}
